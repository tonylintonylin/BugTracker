@page
@model ListModel

<div class="card">
    <div class="card-header">
        <h3 class="text-uppercase mb-0">
            All Users
        </h3><br />
        @{
            if (User.IsInRole("Admin") || User.IsInRole("Project Manager"))
            {
                <a class="btn btn-primary float-left " asp-page="Create">Create New User</a>
            }
        }
    </div>

    <div class="card-body">
        <table id="" class="display table table-hover table-bordered card-text">
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Modify</th>

                @if (Model.Users.Count() == 0)
                {
                    <tr><td colspan="4" class="text-center">No User Accounts</td></tr>
                }
                else
                {
                foreach (IdentityUser user in Model.Users)
                {
                    <tr>
                        <td>@user.UserName</td>
                        <td>@user.Email</td>
                        <td class="text-center">
                            <form asp-page="List" method="post">
                                <input type="hidden" name="Id" value="@user.Id" />
                                <a class="btn btn-outline-info" asp-page="Editor"
                                   asp-route-id="@user.Id" asp-route-mode="edit">Edit</a>
                                <button type="submit" class="btn btn-danger">
                                    Delete
                                </button>
                            </form>
                        </td>
                    </tr>
                }
            }
        </table>
    </div>
</div>

@functions {
    [Authorize(Roles = "Admin")]
    public class ListModel : PageModel
    {
        public UserManager<IdentityUser> UserManager;
        public ListModel(UserManager<IdentityUser> userManager)
        {
            UserManager = userManager;
        }
        public IEnumerable<IdentityUser> Users { get; set; }
        public void OnGet()
        {
            Users = UserManager.Users;
        }

        public async Task<IActionResult> OnPostAsync(string id)
        {
            IdentityUser user = await UserManager.FindByIdAsync(id);
            if (user != null)
            {
                await UserManager.DeleteAsync(user);
            }
            return RedirectToPage();
        }
    }
}
